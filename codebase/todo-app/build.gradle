/*
plugins {
    id 'java'
}
*/

project.ext.prop = 123

ext {
    someOtherprop = 'Hello'
}



println ext.prop
println ext.someOtherprop
println maintainerName


apply plugin: 'java'

//apply plugin: 'application'

def name = getName() // gets access to the project instance and calls the name of the project.
println name

group 'com.learngradle'
version '1.0'

sourceCompatibility = 11

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.learngradle.ToDoApp'
    }
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task printVersion(group: 'versioning', description: 'Prints Version of the project.'){
    doFirst {
        println "doFirst of printVersion"
        doMiddle("$version")
    }

    doLast {
        println "version is $version"
    }
}
def doMiddle(version) {
    println "doMiddle of printVersion $version"
}

// loading the version from the class file
version = new ProjectVersion(0,2,true) // This refers to the version in the Project API of gradle project.

class ProjectVersion{
    Integer minor
    Integer major
    Boolean releaseFlag

    ProjectVersion(Integer minor, Integer major, Boolean releaseFlag) {
        this.minor = minor
        this.major = major
        this.releaseFlag = releaseFlag
    }

    ProjectVersion(Integer minor, Integer major) {
        this.minor = minor
        this.major = major
    }

    @Override
    String toString() {
        return "$major.$minor${releaseFlag ? '' : '-SNAPSHOT'}"
    }
}

// Dynamically loading the version from the properties file.
ext.versionFile = file('version.properties')
task loadVersion {
    project.version=readVersion() // This is a configuration. So this gets executed even though the task is not specifically invoked.
    println "Version is $project.version"

}

ProjectVersion readVersion() {

    logger.quiet('Inside readVersion')
    
    Properties versionProps = new Properties()
    versionFile.withInputStream {
        stream -> versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger()
                 ,versionProps.release.toBoolean())
}

// task input/outputs
task releaseVersion {
    inputs.property('releaseFlag', version.releaseFlag)
    outputs.file versionFile
    doLast {
        version.releaseFlag = true
        ant.propertyfile(file: versionFile) {
            entry(key: 'releaseFlag', type: 'string', operation: '=', value: 'false')
        }
    }
}

// Creating a custom task

class ReleaseVersionTask extends DefaultTask {

    @Input Boolean releaseFlag
    @OutputFile File destFile

    @TaskAction
    void start(){
        project.version.releaseFlag = true
        ant.propertyfile(file: destFile) {
            entry(key: 'releaseFlag', type: 'string', operation: '=', value: 'false')
        }
    }
}

// This is how we pass the input to the ReleaseVersionTask thats created.
task releaseVersion1(type: ReleaseVersionTask) {
    releaseFlag = version.releaseFlag
    destFile = versionFile
}

task createDistribution(type: Zip, dependsOn: releaseVersion){

    from jar.outputs.files // implicit reference to output of jar task

    from (sourceSets*.allSource){ //take all the source files and put them in to zip file
        into 'src'
    }

    from(rootDir){
        include versionFile.name // add the version name to zip file.
    }

}